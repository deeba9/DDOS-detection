# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iHUiJHoKYKd58K3g8otmLU4a0Q-I0rtR
"""

from google.colab import drive
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

drive.mount('/content/drive')

file_path = f"/content/drive/MyDrive/Colab Notebooks/Preprocessed_data.csv"

# Read the Google Sheet into a Pandas DataFrame
df = pd.read_csv(file_path)

# Print the DataFrame
print(df)

# Add additional features
from sklearn.impute import SimpleImputer
df['packets_per_second'] = df.groupby('frame.number')['frame.number'].transform('count') / (df['frame.time'] - df['frame.time'].shift(1))
df['bytes_per_second'] = df.groupby('frame.number')['frame.len'].transform('sum') / (df['frame.time'] - df['frame.time'].shift(1))
df['mean_packet_size'] = df.groupby('frame.number')['frame.len'].transform('mean')
df['interarrival_time'] = df['frame.time'] - df['frame.time'].shift(1)

# Assuming "Value" column contains the labels (normality)
labels = df['normality']

# Extract relevant features (including the new features)
features = df[['frame.len', 'ip.len', 'tcp.len', 'packets_per_second', 'bytes_per_second', 'mean_packet_size', 'interarrival_time']]
imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(features)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_imputed, labels, test_size=0.2, random_state=42)

# Initialize the Random Forest Classifier
clf = RandomForestClassifier(random_state=42)

clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Print the results
print(f"Accuracy: {accuracy}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(classification_rep)